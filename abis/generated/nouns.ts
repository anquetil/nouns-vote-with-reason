// Generated by @wagmi/cli@1.0.3 on 6/1/2023 at 11:32:58 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NounsToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export const nounsTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_noundersDAO', internalType: 'address', type: 'address' },
      { name: '_minter', internalType: 'address', type: 'address' },
      {
        name: '_descriptor',
        internalType: 'contract INounsDescriptor',
        type: 'address',
      },
      {
        name: '_seeder',
        internalType: 'contract INounsSeeder',
        type: 'address',
      },
      {
        name: '_proxyRegistry',
        internalType: 'contract IProxyRegistry',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'DescriptorLocked' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'descriptor',
        internalType: 'contract INounsDescriptor',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DescriptorUpdated',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'MinterLocked' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MinterUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'NounBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'seed',
        internalType: 'struct INounsSeeder.Seed',
        type: 'tuple',
        components: [
          { name: 'background', internalType: 'uint48', type: 'uint48' },
          { name: 'body', internalType: 'uint48', type: 'uint48' },
          { name: 'accessory', internalType: 'uint48', type: 'uint48' },
          { name: 'head', internalType: 'uint48', type: 'uint48' },
          { name: 'glasses', internalType: 'uint48', type: 'uint48' },
        ],
        indexed: false,
      },
    ],
    name: 'NounCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'noundersDAO',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NoundersDAOUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'SeederLocked' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'seeder',
        internalType: 'contract INounsSeeder',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SeederUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DELEGATION_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'nounId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
      { name: 'votes', internalType: 'uint96', type: 'uint96' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'dataURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'delegator', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'descriptor',
    outputs: [
      { name: '', internalType: 'contract INounsDescriptor', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getCurrentVotes',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPriorVotes',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isDescriptorLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isMinterLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isSeederLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockDescriptor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockMinter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'lockSeeder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'mint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'noundersDAO',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxyRegistry',
    outputs: [
      { name: '', internalType: 'contract IProxyRegistry', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'seeder',
    outputs: [
      { name: '', internalType: 'contract INounsSeeder', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'seeds',
    outputs: [
      { name: 'background', internalType: 'uint48', type: 'uint48' },
      { name: 'body', internalType: 'uint48', type: 'uint48' },
      { name: 'accessory', internalType: 'uint48', type: 'uint48' },
      { name: 'head', internalType: 'uint48', type: 'uint48' },
      { name: 'glasses', internalType: 'uint48', type: 'uint48' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newContractURIHash', internalType: 'string', type: 'string' },
    ],
    name: 'setContractURIHash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_descriptor',
        internalType: 'contract INounsDescriptor',
        type: 'address',
      },
    ],
    name: 'setDescriptor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minter', internalType: 'address', type: 'address' }],
    name: 'setMinter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_noundersDAO', internalType: 'address', type: 'address' },
    ],
    name: 'setNoundersDAO',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_seeder',
        internalType: 'contract INounsSeeder',
        type: 'address',
      },
    ],
    name: 'setSeeder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'delegator', internalType: 'address', type: 'address' }],
    name: 'votesToDelegate',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
] as const;

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export const nounsTokenAddress = {
  1: '0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03',
} as const;

/**
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export const nounsTokenConfig = {
  address: nounsTokenAddress,
  abi: nounsTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"DELEGATION_TYPEHASH"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDelegationTypehash<
  TFunctionName extends 'DELEGATION_TYPEHASH',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'DELEGATION_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"DOMAIN_TYPEHASH"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDomainTypehash<
  TFunctionName extends 'DOMAIN_TYPEHASH',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'DOMAIN_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"checkpoints"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"contractURI"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"dataURI"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDataUri<
  TFunctionName extends 'dataURI',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'dataURI',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"decimals"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"delegates"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"descriptor"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDescriptor<
  TFunctionName extends 'descriptor',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'descriptor',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"getApproved"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"getCurrentVotes"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenGetCurrentVotes<
  TFunctionName extends 'getCurrentVotes',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'getCurrentVotes',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"getPriorVotes"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenGetPriorVotes<
  TFunctionName extends 'getPriorVotes',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'getPriorVotes',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"isDescriptorLocked"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenIsDescriptorLocked<
  TFunctionName extends 'isDescriptorLocked',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'isDescriptorLocked',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"isMinterLocked"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenIsMinterLocked<
  TFunctionName extends 'isMinterLocked',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'isMinterLocked',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"isSeederLocked"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenIsSeederLocked<
  TFunctionName extends 'isSeederLocked',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'isSeederLocked',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"minter"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenMinter<
  TFunctionName extends 'minter',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'minter',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"nonces"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"noundersDAO"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenNoundersDao<
  TFunctionName extends 'noundersDAO',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'noundersDAO',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"numCheckpoints"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"ownerOf"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"proxyRegistry"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenProxyRegistry<
  TFunctionName extends 'proxyRegistry',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'proxyRegistry',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"seeder"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSeeder<
  TFunctionName extends 'seeder',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'seeder',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"seeds"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSeeds<
  TFunctionName extends 'seeds',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'seeds',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"tokenURI"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"votesToDelegate"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenVotesToDelegate<
  TFunctionName extends 'votesToDelegate',
  TSelectData = ReadContractResult<typeof nounsTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractRead({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'votesToDelegate',
    ...config,
  } as UseContractReadConfig<typeof nounsTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof nounsTokenABI, TFunctionName, TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, TFunctionName, TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof nounsTokenABI, 'approve', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'approve', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"burn"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenBurn<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'burn' }
    : UseContractWriteConfig<typeof nounsTokenABI, 'burn', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'burn';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'burn', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'burn',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"delegate"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDelegate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'delegate' }
    : UseContractWriteConfig<typeof nounsTokenABI, 'delegate', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'delegate';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'delegate', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'delegate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"delegateBySig"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDelegateBySig<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'delegateBySig';
      }
    : UseContractWriteConfig<typeof nounsTokenABI, 'delegateBySig', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'delegateBySig';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'delegateBySig', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'delegateBySig',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"lockDescriptor"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenLockDescriptor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'lockDescriptor'
        >['request']['abi'],
        'lockDescriptor',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'lockDescriptor';
      }
    : UseContractWriteConfig<typeof nounsTokenABI, 'lockDescriptor', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'lockDescriptor';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'lockDescriptor', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'lockDescriptor',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"lockMinter"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenLockMinter<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'lockMinter'
        >['request']['abi'],
        'lockMinter',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'lockMinter' }
    : UseContractWriteConfig<typeof nounsTokenABI, 'lockMinter', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'lockMinter';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'lockMinter', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'lockMinter',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"lockSeeder"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenLockSeeder<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'lockSeeder'
        >['request']['abi'],
        'lockSeeder',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'lockSeeder' }
    : UseContractWriteConfig<typeof nounsTokenABI, 'lockSeeder', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'lockSeeder';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'lockSeeder', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'lockSeeder',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof nounsTokenABI, 'mint', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'mint';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'mint', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'mint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'renounceOwnership';
      }
    : UseContractWriteConfig<
        typeof nounsTokenABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'renounceOwnership', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'renounceOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'safeTransferFrom';
      }
    : UseContractWriteConfig<
        typeof nounsTokenABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'safeTransferFrom', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setApprovalForAll';
      }
    : UseContractWriteConfig<
        typeof nounsTokenABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'setApprovalForAll', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setContractURIHash"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSetContractUriHash<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'setContractURIHash'
        >['request']['abi'],
        'setContractURIHash',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setContractURIHash';
      }
    : UseContractWriteConfig<
        typeof nounsTokenABI,
        'setContractURIHash',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setContractURIHash';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'setContractURIHash', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setContractURIHash',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setDescriptor"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSetDescriptor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'setDescriptor'
        >['request']['abi'],
        'setDescriptor',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setDescriptor';
      }
    : UseContractWriteConfig<typeof nounsTokenABI, 'setDescriptor', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setDescriptor';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'setDescriptor', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setDescriptor',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setMinter"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSetMinter<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'setMinter'
        >['request']['abi'],
        'setMinter',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setMinter' }
    : UseContractWriteConfig<typeof nounsTokenABI, 'setMinter', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setMinter';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'setMinter', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setMinter',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setNoundersDAO"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSetNoundersDao<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'setNoundersDAO'
        >['request']['abi'],
        'setNoundersDAO',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'setNoundersDAO';
      }
    : UseContractWriteConfig<typeof nounsTokenABI, 'setNoundersDAO', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setNoundersDAO';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'setNoundersDAO', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setNoundersDAO',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setSeeder"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSetSeeder<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'setSeeder'
        >['request']['abi'],
        'setSeeder',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setSeeder' }
    : UseContractWriteConfig<typeof nounsTokenABI, 'setSeeder', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'setSeeder';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'setSeeder', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setSeeder',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'transferFrom';
      }
    : UseContractWriteConfig<typeof nounsTokenABI, 'transferFrom', TMode> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'transferFrom', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nounsTokenAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nounsTokenABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: 'transferOwnership';
      }
    : UseContractWriteConfig<
        typeof nounsTokenABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<typeof nounsTokenABI, 'transferOwnership', TMode>({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'transferOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"burn"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'burn'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'burn'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"delegate"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'delegate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'delegate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"delegateBySig"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'delegateBySig'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'delegateBySig'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"lockDescriptor"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenLockDescriptor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'lockDescriptor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'lockDescriptor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'lockDescriptor'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"lockMinter"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenLockMinter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'lockMinter'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'lockMinter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'lockMinter'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"lockSeeder"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenLockSeeder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'lockSeeder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'lockSeeder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'lockSeeder'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'mint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nounsTokenABI,
    'renounceOwnership'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nounsTokenABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setContractURIHash"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenSetContractUriHash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setContractURIHash'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setContractURIHash',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nounsTokenABI,
    'setContractURIHash'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setDescriptor"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenSetDescriptor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setDescriptor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setDescriptor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setDescriptor'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setMinter"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenSetMinter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setMinter'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setMinter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setMinter'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setNoundersDAO"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenSetNoundersDao(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setNoundersDAO'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setNoundersDAO',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setNoundersDAO'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"setSeeder"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenSetSeeder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setSeeder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'setSeeder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'setSeeder'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nounsTokenABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nounsTokenABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function usePrepareNounsTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nounsTokenABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nounsTokenABI,
    'transferOwnership'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"DelegateChanged"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'DelegateChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'DelegateChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'DelegateVotesChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'DelegateVotesChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"DescriptorLocked"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDescriptorLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'DescriptorLocked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'DescriptorLocked',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'DescriptorLocked'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"DescriptorUpdated"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenDescriptorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'DescriptorUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'DescriptorUpdated',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'DescriptorUpdated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"MinterLocked"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenMinterLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'MinterLocked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'MinterLocked',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'MinterLocked'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"MinterUpdated"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenMinterUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'MinterUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'MinterUpdated',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'MinterUpdated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"NounBurned"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenNounBurnedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'NounBurned'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'NounBurned',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'NounBurned'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"NounCreated"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenNounCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'NounCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'NounCreated',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'NounCreated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"NoundersDAOUpdated"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenNoundersDaoUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'NoundersDAOUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'NoundersDAOUpdated',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'NoundersDAOUpdated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"SeederLocked"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSeederLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'SeederLocked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'SeederLocked',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'SeederLocked'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"SeederUpdated"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenSeederUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'SeederUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'SeederUpdated',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'SeederUpdated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nounsTokenABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x9c8ff314c9bc7f6e59a9d9225fb22946427edc03)
 */
export function useNounsTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof nounsTokenABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nounsTokenAddress } = {} as any
) {
  return useContractEvent({
    abi: nounsTokenABI,
    address: nounsTokenAddress[1],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof nounsTokenABI, 'Transfer'>);
}
